{"version":3,"sources":["components/Input.jsx","components/TodoList.jsx","components/constants.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","type","id","placeholder","value","done","readOnly","style","onmouseover","onmouseout","className","textDecoration","color","maxLength","onMouseOver","onMouseOut","defaultProps","TodoList","todoItems","removeItem","completeItem","length","map","item","key","background","border","cursor","pointerEvents","onClick","ev","currentTarget","App","state","addItem","bind","clearAnimation","setAnimation","opacity","transition","document","getElementById","trim","this","push","setState","index","newtodoItems","i","arr","forEach","unshift","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c123e023.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Input = props => {\r\n  const {\r\n    type,\r\n    id,\r\n    placeholder,\r\n    value,\r\n    done,\r\n    readOnly,\r\n    style,\r\n    onmouseover,\r\n    onmouseout\r\n  } = props;\r\n\r\n  return (\r\n    <input\r\n      id={id}\r\n      className=\"input\"\r\n      type={type}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      style={{\r\n        textDecoration: done ? \"line-through\" : \"none\",\r\n        color: style ? style : \"\"\r\n      }}\r\n      maxLength={80}\r\n      readOnly={readOnly}\r\n      onMouseOver={onmouseover}\r\n      onMouseOut={onmouseout}\r\n    />\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  type: PropTypes.string,\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  placeholder: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  style: PropTypes.string,\r\n  done: PropTypes.bool,\r\n  readOnly: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  onmouseover: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([null])]),\r\n  onmouseout: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([null])])\r\n};\r\n\r\nInput.defaultProps = {\r\n  type: \"text\",\r\n  placeholder: \"What you want to do?\",\r\n  readOnly: false,\r\n  onmouseover: null,\r\n  onmouseout: null\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Input from \"./Input\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoList = props => {\r\n  const {\r\n    todoItems,\r\n    removeItem,\r\n    completeItem,\r\n    onmouseover,\r\n    onmouseout\r\n  } = props;\r\n\r\n  return todoItems.length !== 0\r\n    ? todoItems.map((item, id) => {\r\n        return (\r\n          <div key={id} className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n              <Input\r\n                value={item.value}\r\n                id={id}\r\n                readOnly\r\n                done={item.done}\r\n                style={item.done ? \"red\" : \"green\"}\r\n                onmouseover={onmouseover}\r\n                onmouseout={onmouseout}\r\n              />\r\n              <span\r\n                className=\"icon is-small is-left\"\r\n                style={{\r\n                  background: \"none\",\r\n                  border: \"none\",\r\n                  cursor: \"pointer\"\r\n                }}\r\n              >\r\n                <i\r\n                  id={id}\r\n                  className={\r\n                    item.done ? \"fas fa-minus-circle\" : \"fas fa-check-circle\"\r\n                  }\r\n                  style={{\r\n                    color: item.done ? \"red\" : \"green\",\r\n                    pointerEvents: \"auto\"\r\n                  }}\r\n                  onClick={ev => {\r\n                    completeItem(+ev.currentTarget.id);\r\n                  }}\r\n                ></i>\r\n              </span>\r\n              <span className=\"icon is-small is-right\">\r\n                <i\r\n                  id={id}\r\n                  className=\"delete\"\r\n                  onClick={ev => {\r\n                    removeItem(+ev.currentTarget.id);\r\n                  }}\r\n                >\r\n                  >\r\n                </i>\r\n              </span>\r\n            </p>\r\n          </div>\r\n        );\r\n      })\r\n    : null;\r\n};\r\n\r\nTodoList.defaultProps = {\r\n  todoItems: []\r\n};\r\n\r\nTodoList.propTypes = {\r\n  todoItems: PropTypes.arrayOf(PropTypes.object),\r\n  removeItem: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  completeItem: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n};\r\n\r\nexport default TodoList;\r\n","const todoItems = [\r\n  {\r\n    id: 0,\r\n    value: \"Finish this task\",\r\n    done: false\r\n  },\r\n  {\r\n    id: 1,\r\n    value: \"Have a rest\",\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    value: \"Go to sleep\",\r\n    done: true\r\n  }\r\n];\r\n\r\nexport default todoItems;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./components/Input\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport todoItems from \"./components/constants\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { todoItems };\r\n    this.addItem = this.addItem.bind(this);\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.completeItem = this.completeItem.bind(this);\r\n    this.clearAnimation = this.clearAnimation.bind(this);\r\n    this.setAnimation = this.setAnimation.bind(this);\r\n  }\r\n\r\n  setAnimation(ev) {\r\n    ev.currentTarget.style.opacity = \"0.8\";\r\n    ev.currentTarget.style.transition = \"0.5s ease-out\";\r\n  }\r\n\r\n  clearAnimation(ev) {\r\n    ev.currentTarget.style.opacity = \"1\";\r\n    ev.currentTarget.style.transition = \"0.5s ease-out\";\r\n  }\r\n\r\n  addItem() {\r\n    const value = document.getElementById(\"start-input\").value;\r\n    if (value.trim()) {\r\n      let { todoItems } = this.state;\r\n      todoItems.push({ id: todoItems.length, value: value, done: false });\r\n      document.getElementById(\"start-input\").value = \"\";\r\n      this.setState({\r\n        todoItems: [...todoItems]\r\n      });\r\n    }\r\n  }\r\n\r\n  removeItem(index) {\r\n    let { todoItems } = this.state;\r\n    let newtodoItems = [];\r\n    for (let i = 0; i < todoItems.length; i++) {\r\n      if (i !== index) {\r\n        newtodoItems.push(todoItems[i]);\r\n      }\r\n    }\r\n    this.setState({\r\n      todoItems: [...newtodoItems]\r\n    });\r\n  }\r\n\r\n  completeItem(index) {\r\n    let { todoItems } = this.state;\r\n    let arr = [];\r\n    todoItems.forEach((item, id) => {\r\n      if (id === index) {\r\n        item.done = !item.done;\r\n      }\r\n      if (item.done) {\r\n        arr.push(item);\r\n      } else {\r\n        arr.unshift(item);\r\n      }\r\n    });\r\n    this.setState({\r\n      todoItems: [...arr]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { todoItems } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"title is-1\" style={{ color: \"white\" }}>\r\n            To do app\r\n          </h1>\r\n          <div className=\"field\">\r\n            <div className=\"control has-icons-left has-icons-right\">\r\n              <Input id=\"start-input\" readOnly={false} />\r\n              <button\r\n                className={\"button is-primary is-smal\"}\r\n                onClick={this.addItem}>\r\n                add item\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <TodoList\r\n            removeItem={this.removeItem}\r\n            todoItems={[...todoItems]}\r\n            completeItem={this.completeItem}\r\n            onmouseover={this.setAnimation}\r\n            onmouseout={this.clearAnimation}\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}